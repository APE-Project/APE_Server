/************************************************************************/
/*                                                                      */
/* This file is automatically generated by ORBeline IDL compiler        */
/* Do not modify this file.                                             */
/*                                                                      */
/* ORBeline (c) is copyrighted by PostModern Computing, Inc.            */
/*                                                                      */
/* The generated code conforms to OMG's IDL C++ mapping as              */
/* specified in OMG Document Number: 94-9-14.                           */
/*                                                                      */
/************************************************************************/

#include "ifaces_s.hh"



static CORBA::MethodDescription _StringReciever_methods[] = {
		{"recieveString", &_sk_StringReciever::_recieveString},
		{"bounce", &_sk_StringReciever::_bounce}	};
const CORBA::TypeInfo _sk_StringReciever::_skel_info(
		"StringReciever",
		(CORBA::ULong)2,
		_StringReciever_methods);
_sk_StringReciever::_sk_StringReciever(const char *object_name) : 
	StringReciever(object_name)
{
	_object_name(object_name);
}
_sk_StringReciever::_sk_StringReciever(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_StringReciever::_recieveString(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	StringReciever *_impl = (StringReciever *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->recieveString(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_StringReciever::_bounce(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	StringReciever *_impl = (StringReciever *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->bounce(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}

static CORBA::MethodDescription _TestInterface_methods[] = {
		{"getFirstAppInList", &_sk_TestInterface::_getFirstAppInList},
		{"getAppNames", &_sk_TestInterface::_getAppNames},
		{"getThings", &_sk_TestInterface::_getThings},
		{"callBounce", &_sk_TestInterface::_callBounce}	};
const CORBA::TypeInfo _sk_TestInterface::_skel_info(
		"TestInterface",
		(CORBA::ULong)4,
		_TestInterface_methods);
_sk_TestInterface::_sk_TestInterface(const char *object_name) : 
	TestInterface(object_name)
{
	_object_name(object_name);
}
_sk_TestInterface::_sk_TestInterface(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_TestInterface::_getFirstAppInList(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	TestInterface *_impl = (TestInterface *)_obj;
	_strm.flushRead();
	CORBA::String_var  _ret = _impl->getFirstAppInList();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_TestInterface::_getAppNames(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	TestInterface *_impl = (TestInterface *)_obj;
	StringReciever_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->getAppNames(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}



void _sk_TestInterface::_getThings(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	TestInterface *_impl = (TestInterface *)_obj;
	_strm.flushRead();
	TestInterface::sequence_of_Thing_var _ret = _impl->getThings();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_TestInterface::_callBounce(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	TestInterface *_impl = (TestInterface *)_obj;
	StringReciever_var arg0;
	CORBA::Long arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	_impl->callBounce(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}

static CORBA::MethodDescription _ISourceTextProvider_methods[] = {
		{"getAllPages", &_sk_ISourceTextProvider::_getAllPages},
		{"refreshAllPages", &_sk_ISourceTextProvider::_refreshAllPages},
		{"hasPage", &_sk_ISourceTextProvider::_hasPage},
		{"loadPage", &_sk_ISourceTextProvider::_loadPage},
		{"refreshPage", &_sk_ISourceTextProvider::_refreshPage},
		{"getPageText", &_sk_ISourceTextProvider::_getPageText},
		{"getPageStatus", &_sk_ISourceTextProvider::_getPageStatus},
		{"getPageAlterCount", &_sk_ISourceTextProvider::_getPageAlterCount}	};
const CORBA::TypeInfo _sk_ISourceTextProvider::_skel_info(
		"ISourceTextProvider",
		(CORBA::ULong)8,
		_ISourceTextProvider_methods);
_sk_ISourceTextProvider::_sk_ISourceTextProvider(const char *object_name) : 
	ISourceTextProvider(object_name)
{
	_object_name(object_name);
}
_sk_ISourceTextProvider::_sk_ISourceTextProvider(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}


void _sk_ISourceTextProvider::_getAllPages(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	_strm.flushRead();
	ISourceTextProvider::sequence_of_string_var _ret = _impl->getAllPages();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_refreshAllPages(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	_strm.flushRead();
	_impl->refreshAllPages();
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_hasPage(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Boolean _ret = _impl->hasPage(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_loadPage(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Boolean _ret = _impl->loadPage(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_refreshPage(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->refreshPage(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_getPageText(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::String_var  _ret = _impl->getPageText(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_getPageStatus(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Long _ret = _impl->getPageStatus(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_ISourceTextProvider::_getPageAlterCount(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	ISourceTextProvider *_impl = (ISourceTextProvider *)_obj;
	CORBA::String_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Long _ret = _impl->getPageAlterCount(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}

static CORBA::MethodDescription _IJSErrorReporter_methods[] = {
		{"reportError", &_sk_IJSErrorReporter::_reportError}	};
const CORBA::TypeInfo _sk_IJSErrorReporter::_skel_info(
		"IJSErrorReporter",
		(CORBA::ULong)1,
		_IJSErrorReporter_methods);
_sk_IJSErrorReporter::_sk_IJSErrorReporter(const char *object_name) : 
	IJSErrorReporter(object_name)
{
	_object_name(object_name);
}
_sk_IJSErrorReporter::_sk_IJSErrorReporter(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_IJSErrorReporter::_reportError(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IJSErrorReporter *_impl = (IJSErrorReporter *)_obj;
	CORBA::String_var arg0;
	CORBA::String_var arg1;
	CORBA::Long arg2;
	CORBA::String_var arg3;
	CORBA::Long arg4;
	_strm >> arg0;
	_strm >> arg1;
	_strm >> arg2;
	_strm >> arg3;
	_strm >> arg4;

	_strm.flushRead();
	CORBA::Long _ret = _impl->reportError(
		arg0,
		arg1,
		arg2,
		arg3,
		arg4);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}

static CORBA::MethodDescription _IScriptHook_methods[] = {
		{"justLoadedScript", &_sk_IScriptHook::_justLoadedScript},
		{"aboutToUnloadScript", &_sk_IScriptHook::_aboutToUnloadScript}	};
const CORBA::TypeInfo _sk_IScriptHook::_skel_info(
		"IScriptHook",
		(CORBA::ULong)2,
		_IScriptHook_methods);
_sk_IScriptHook::_sk_IScriptHook(const char *object_name) : 
	IScriptHook(object_name)
{
	_object_name(object_name);
}
_sk_IScriptHook::_sk_IScriptHook(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_IScriptHook::_justLoadedScript(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IScriptHook *_impl = (IScriptHook *)_obj;
	IScript arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->justLoadedScript(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IScriptHook::_aboutToUnloadScript(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IScriptHook *_impl = (IScriptHook *)_obj;
	IScript arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->aboutToUnloadScript(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}

static CORBA::MethodDescription _IJSExecutionHook_methods[] = {
		{"aboutToExecute", &_sk_IJSExecutionHook::_aboutToExecute}	};
const CORBA::TypeInfo _sk_IJSExecutionHook::_skel_info(
		"IJSExecutionHook",
		(CORBA::ULong)1,
		_IJSExecutionHook_methods);
_sk_IJSExecutionHook::_sk_IJSExecutionHook(const char *object_name) : 
	IJSExecutionHook(object_name)
{
	_object_name(object_name);
}
_sk_IJSExecutionHook::_sk_IJSExecutionHook(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_IJSExecutionHook::_aboutToExecute(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IJSExecutionHook *_impl = (IJSExecutionHook *)_obj;
	IJSThreadState arg0;
	IJSPC arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	_impl->aboutToExecute(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}

static CORBA::MethodDescription _IDebugController_methods[] = {
		{"getMajorVersion", &_sk_IDebugController::_getMajorVersion},
		{"getMinorVersion", &_sk_IDebugController::_getMinorVersion},
		{"setErrorReporter", &_sk_IDebugController::_setErrorReporter},
		{"getErrorReporter", &_sk_IDebugController::_getErrorReporter},
		{"setScriptHook", &_sk_IDebugController::_setScriptHook},
		{"getScriptHook", &_sk_IDebugController::_getScriptHook},
		{"getClosestPC", &_sk_IDebugController::_getClosestPC},
		{"getSourceLocation", &_sk_IDebugController::_getSourceLocation},
		{"setInterruptHook", &_sk_IDebugController::_setInterruptHook},
		{"getInterruptHook", &_sk_IDebugController::_getInterruptHook},
		{"setDebugBreakHook", &_sk_IDebugController::_setDebugBreakHook},
		{"getDebugBreakHook", &_sk_IDebugController::_getDebugBreakHook},
		{"setInstructionHook", &_sk_IDebugController::_setInstructionHook},
		{"getInstructionHook", &_sk_IDebugController::_getInstructionHook},
		{"setThreadContinueState", &_sk_IDebugController::_setThreadContinueState},
		{"setThreadReturnValue", &_sk_IDebugController::_setThreadReturnValue},
		{"sendInterrupt", &_sk_IDebugController::_sendInterrupt},
		{"sendInterruptStepInto", &_sk_IDebugController::_sendInterruptStepInto},
		{"sendInterruptStepOver", &_sk_IDebugController::_sendInterruptStepOver},
		{"sendInterruptStepOut", &_sk_IDebugController::_sendInterruptStepOut},
		{"reinstateStepper", &_sk_IDebugController::_reinstateStepper},
		{"executeScriptInStackFrame", &_sk_IDebugController::_executeScriptInStackFrame},
		{"isRunningHook", &_sk_IDebugController::_isRunningHook},
		{"isWaitingForResume", &_sk_IDebugController::_isWaitingForResume},
		{"leaveThreadSuspended", &_sk_IDebugController::_leaveThreadSuspended},
		{"resumeThread", &_sk_IDebugController::_resumeThread},
		{"iterateScripts", &_sk_IDebugController::_iterateScripts}	};
const CORBA::TypeInfo _sk_IDebugController::_skel_info(
		"IDebugController",
		(CORBA::ULong)27,
		_IDebugController_methods);
_sk_IDebugController::_sk_IDebugController(const char *object_name) : 
	IDebugController(object_name)
{
	_object_name(object_name);
}
_sk_IDebugController::_sk_IDebugController(const char *service_name, const CORBA::ReferenceData& id)
{
	_service(service_name, id);
}

void _sk_IDebugController::_getMajorVersion(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	CORBA::Long _ret = _impl->getMajorVersion();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getMinorVersion(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	CORBA::Long _ret = _impl->getMinorVersion();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setErrorReporter(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSErrorReporter_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	IJSErrorReporter_var _ret = _impl->setErrorReporter(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getErrorReporter(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	IJSErrorReporter_var _ret = _impl->getErrorReporter();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setScriptHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IScriptHook_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	IScriptHook_var _ret = _impl->setScriptHook(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getScriptHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	IScriptHook_var _ret = _impl->getScriptHook();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getClosestPC(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IScript arg0;
	CORBA::Long arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	IJSPC_var _ret = _impl->getClosestPC(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getSourceLocation(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSPC arg0;
	_strm >> arg0;

	_strm.flushRead();
	IJSSourceLocation_var _ret = _impl->getSourceLocation(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setInterruptHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSExecutionHook_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->setInterruptHook(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getInterruptHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->getInterruptHook();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setDebugBreakHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSExecutionHook_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->setDebugBreakHook(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getDebugBreakHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->getDebugBreakHook();
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setInstructionHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSExecutionHook_var arg0;
	IJSPC arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->setInstructionHook(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_getInstructionHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IJSPC arg0;
	_strm >> arg0;

	_strm.flushRead();
	IJSExecutionHook_var _ret = _impl->getInstructionHook(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_setThreadContinueState(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	CORBA::Long arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	_impl->setThreadContinueState(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_setThreadReturnValue(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	CORBA::String_var arg1;
	_strm >> arg0;
	_strm >> arg1;

	_strm.flushRead();
	_impl->setThreadReturnValue(
		arg0,
		arg1);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_sendInterrupt(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	_strm.flushRead();
	_impl->sendInterrupt();
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_sendInterruptStepInto(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->sendInterruptStepInto(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_sendInterruptStepOver(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->sendInterruptStepOver(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_sendInterruptStepOut(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->sendInterruptStepOut(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_reinstateStepper(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->reinstateStepper(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_executeScriptInStackFrame(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	IJSStackFrameInfo arg1;
	CORBA::String_var arg2;
	CORBA::String_var arg3;
	CORBA::Long arg4;
	_strm >> arg0;
	_strm >> arg1;
	_strm >> arg2;
	_strm >> arg3;
	_strm >> arg4;

	_strm.flushRead();
	IExecResult_var _ret = _impl->executeScriptInStackFrame(
		arg0,
		arg1,
		arg2,
		arg3,
		arg4);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_isRunningHook(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Boolean _ret = _impl->isRunningHook(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_isWaitingForResume(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	CORBA::Boolean _ret = _impl->isWaitingForResume(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm << _ret;
	_strm.sendMessage();
}


void _sk_IDebugController::_leaveThreadSuspended(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->leaveThreadSuspended(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_resumeThread(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	CORBA::Long arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->resumeThread(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


void _sk_IDebugController::_iterateScripts(
		void *_obj,
		CORBA::MarshalStream &_strm,
		CORBA::Principal_ptr ,
		const char *,
		void *_priv_data)
{
	IDebugController *_impl = (IDebugController *)_obj;
	IScriptHook_var arg0;
	_strm >> arg0;

	_strm.flushRead();
	_impl->iterateScripts(
		arg0);
	_impl->_prepare_reply(_priv_data);
	_strm.sendMessage();
}


