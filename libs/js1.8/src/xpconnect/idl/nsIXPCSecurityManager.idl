/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   John Bandhauer <jband@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[ptr] native nsAXPCNativeCallContextPtr(nsAXPCNativeCallContext);

%{ C++
#include "jspubtd.h"

class nsAXPCNativeCallContext;
%}

interface nsIClassInfo;

[ptr] native JSContextPtr(JSContext);
[ptr] native JSObjectPtr(JSObject);
      native JSVal(jsval);
[ptr] native JSStackFramePtr(JSStackFrame);

[uuid(31431440-f1ce-11d2-985a-006008962422)]
interface nsIXPCSecurityManager : nsISupports
{
    /**
    * These flags are used when calling nsIXPConnect::SetSecurityManager
    */

    const PRUint32 HOOK_CREATE_WRAPPER  = 1 << 0;
    const PRUint32 HOOK_CREATE_INSTANCE = 1 << 1;
    const PRUint32 HOOK_GET_SERVICE     = 1 << 2;
    const PRUint32 HOOK_CALL_METHOD     = 1 << 3;
    const PRUint32 HOOK_GET_PROPERTY    = 1 << 4;
    const PRUint32 HOOK_SET_PROPERTY    = 1 << 5;

    const PRUint32 HOOK_ALL             = HOOK_CREATE_WRAPPER  |
                                          HOOK_CREATE_INSTANCE |
                                          HOOK_GET_SERVICE     |
                                          HOOK_CALL_METHOD     |
                                          HOOK_GET_PROPERTY    |
                                          HOOK_SET_PROPERTY    ;

    /**
    * For each of these hooks returning NS_OK means 'let the action continue'.
    * Returning an error code means 'veto the action'. XPConnect will return
    * JS_FALSE to the js engine if the action is vetoed. The implementor of this
    * interface is responsible for setting a JS exception into the JSContext
    * if that is appropriate.
    */

    void CanCreateWrapper(in JSContextPtr aJSContext,
                          in nsIIDRef aIID,
                          in nsISupports aObj,
                          in nsIClassInfo aClassInfo,
                          inout voidPtr aPolicy);

    void CanCreateInstance(in JSContextPtr aJSContext,
                           in nsCIDRef aCID);

    void CanGetService(in JSContextPtr aJSContext,
                       in nsCIDRef aCID);

    /*
     * Used for aAction below
     */
    const PRUint32 ACCESS_CALL_METHOD  = 0;
    const PRUint32 ACCESS_GET_PROPERTY = 1;
    const PRUint32 ACCESS_SET_PROPERTY = 2;

    void CanAccess(in PRUint32 aAction,
                   in nsAXPCNativeCallContextPtr aCallContext,
                   in JSContextPtr aJSContext,
                   in JSObjectPtr aJSObject,
                   in nsISupports aObj,
                   in nsIClassInfo aClassInfo,
                   in JSVal aName,
                   inout voidPtr aPolicy);
};
