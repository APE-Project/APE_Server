/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   John Bandhauer <jband@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[ptr] native JSContext(JSContext);

[uuid(c67d8270-3189-11d3-9885-006008962422)]
interface nsIJSContextStack : nsISupports
{
    readonly attribute PRInt32  count;
    JSContext                   peek();
    JSContext                   pop();
    void                        push(in JSContext cx);
};

[uuid(c7e6b7aa-fc12-4ca7-b140-98c38b698961)]
interface nsIJSContextStackIterator : nsISupports
{
    /**
     * Resets this iterator to the beginning of this thread's stack.
     */
    void reset(in nsIJSContextStack stack);

    /**
     * Returns true if this iterator is at the end of its stack's contexts.
     * @throws NS_ERROR_NOT_INITIALIZED If there has not been a previous call
     *         to reset.
     */
    boolean done();

    /**
     * Returns the prev JSContext off of stack. Note that because we're 
     * iterating over a stack, this value would be the next popped value.
     *
     * @throws NS_ERROR_NOT_INITIALIZED If there has not been a previous call
     *         to reset.
     * @throws NS_ERROR_NOT_AVAILABLE if already at the end.
     */
    JSContext prev();
};

[uuid(a1339ae0-05c1-11d4-8f92-0010a4e73d9a)]
interface nsIThreadJSContextStack : nsIJSContextStack
{
    /* inherits methods of nsIJSContextStack */
    attribute JSContext safeJSContext;
};
