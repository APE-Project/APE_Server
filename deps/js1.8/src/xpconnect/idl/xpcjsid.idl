/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Communicator client code, released
 * March 31, 1998.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   John Bandhauer <jband@netscape.com> (original author)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

[ptr] native const_nsID_ptr(const nsID);

[scriptable, uuid(baedc96a-9cee-4b6b-9160-90d257b3c8ef)]
interface nsIJSID : nsISupports
{
    readonly attribute string  name;
    readonly attribute string  number;
    readonly attribute boolean valid;

    boolean equals(in nsIJSID other);

    void initialize(in string idString);

    string toString();

    // returns a pointer to the internal nsID. this pointer is only valid
    // while the nsIJSID object remains alive!
    [notxpcom] const_nsID_ptr getID();
};

[scriptable, uuid(e76ec564-a080-4705-8609-384c755ec91e)]
interface nsIJSIID : nsIJSID
{
};

[scriptable, uuid(26b2a374-6eaf-46d4-acaf-1c6be152d36b)]
interface nsIJSCID : nsIJSID
{
    nsISupports createInstance();
    nsISupports getService();
};

/* this goes into the C++ header verbatim. */
%{ C++
/********************************************************/
// {F24A14F0-4FA1-11d3-9894-006008962422}
#define NS_JS_ID_CID  \
{ 0xf24a14f0, 0x4fa1, 0x11d3, \
    { 0x98, 0x94, 0x0, 0x60, 0x8, 0x96, 0x24, 0x22 } }
%}

